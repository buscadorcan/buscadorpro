@attribute [Route(Routes.CONEXION)]
@layout AdminLayout
@using OfficeOpenXml
@using SharedApp.Dtos
@inject IJSRuntime JSRuntime
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf
@using ClientAppAdministrador.Pages.Components;

@if (IsLoading)
{
	<div class="overlay">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Cargando...</span>
		</div>
		<div class="progress mt-2" style="width: 100%;">
			<div class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" style="width: @ProgressValue%;" aria-valuenow="@ProgressValue" aria-valuemin="0" aria-valuemax="100"></div>
		</div>
		<p class="label valign-text-middle inter-regular-normal-comet-14px">Procesando migración, por favor espere...</p>
	</div>
}

<Toasts class="p-3" Messages="messages" Placement="@toastsPlacement" />
<PageTitle>Homologación</PageTitle>
<Toasts class="p-3" Messages="messages" Placement="@toastsPlacement" />

<div class="ds-title-section">

	<h2 class="ds-title-h2">Administración <span>Conexiones Existentes</span></h2>

	<div class="ds-buttons-content">

		<!-- Botón Exportar a Excel -->
		<a href="javascript:void(0)" class="ds-btn-general ds-btn-blue" @onclick="ExportarExcel">
			<img src="images/admin/ico-excel-blue.svg"
				 width="19" height="19"> Excel
		</a>

		<!-- Botón Exportar a PDF -->
		<a href="javascript:void(0)" class="ds-btn-general ds-btn-red" @onclick="ExportarPDF">
			<img src="images/admin/ico-file-pdf-ref.svg"
				 width="19" height="19">PDF
		</a>

		<!-- Botón Agregar Registro -->
		<a href="@Routes.NUEVO_CONEXION" class="ds-btn-general ds-btn-yellow">
			<div class="button-3 headingheadline4-h4">Nuevo</div>
		</a>
	</div>

</div>

<div class="ds-content-section full">

	@if (isLoading)
	{
		<div class="d-flex justify-content-center align-items-center" style="height: 300px;">
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Cargando...</span>
			</div>
		</div>
	}
	else
	{
		<div class="table-responsive">
			<table class="general table">
				<thead>
					<tr>
						<th>Ona</th>
						@foreach (var column in new[]
											{
					(nameof(ONAConexionDto.Host), "Host"),
					(nameof(ONAConexionDto.Puerto), "Puerto"),
					(nameof(ONAConexionDto.Usuario), "Usuario"),
					(nameof(ONAConexionDto.BaseDatos), "Base Datos"),
					(nameof(ONAConexionDto.OrigenDatos), "Origen Datos"),
					(nameof(ONAConexionDto.Migrar), "Migrar"),
					(nameof(ONAConexionDto.Estado), "Estado")
					})
						{
							<th @onclick="() => OrdenarPor(column.Item1)">
								@column.Item2 @(sortColumn == column.Item1 ? (sortAscending ? Constantes.FLECHA_ARRIBA : Constantes.FLECHA_ABAJO) : Constantes.VACIO)
							</th>
						}
						<th>Validar</th>
						<th>Migrar</th>
						<th>A. Migrar</th>
						<th>Editar</th>
						<th>Eliminar</th>
					</tr>
				</thead>
				<tbody>
					@if (listasHevd != null && listasHevd.Any())
					{
						@foreach (var conexion in PaginatedItems)
						{
							<tr>
								<td title="@conexion.Siglas">@conexion.Siglas</td>
								<td title="@conexion.Host">@conexion.Host</td>
								<td title="@conexion.Puerto">@conexion.Puerto</td>
								<td title="@conexion.Usuario">@conexion.Usuario</td>
								<td title="@conexion.BaseDatos">@conexion.BaseDatos</td>
								<td title="@conexion.OrigenDatos">@conexion.OrigenDatos</td>
								<td>
									@((MarkupString)(conexion.Migrar == Constantes.SUSPENDIDO
																? "<span class='estado-activo'>✔</span>"
																: "<span class='estado-inactivo'>✖</span>"))
								</td>
								<td>
									@((MarkupString)(conexion.Estado == Constantes.ACTIVO
																? "<span class='estado-activo'>✔</span>"
																: "<span class='estado-inactivo'>✖</span>"))
								</td>
								<td>
									@if (conexion.OrigenDatos != Constantes.EXCEL)
									{
										<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await OnTestconexionClick(conexion.IdONA)" Size="ButtonSize.Small">
											<Icon Name="IconName.RCircle" />
										</Button>
									}
								</td>
								<td>
									@if (conexion.OrigenDatos != Constantes.EXCEL)
									{
										<Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await OnMigrarClick(conexion.IdONA)" Size="ButtonSize.Small">
											<Icon Name="IconName.DatabaseAdd" />
										</Button>
									}
								</td>
								<td title="Migración Automatica">

									<Button Color="ButtonColor.Info" Outline="true" @onclick="() => ProgramMigrar(conexion)" Size="ButtonSize.Small">
										<Icon Name="IconName.SymmetryHorizontal" />
									</Button>

								</td>
								<td>
									<Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true" To="@($"/editar-conexion/{conexion.IdONA}")" Size="ButtonSize.Small">
										<Icon Name="IconName.PencilSquare" />
									</Button>
								</td>
								<td>
									<Button Color="ButtonColor.Danger" Outline="true" @onclick=@(() => OpenDeleteModal(conexion.IdONA)) Size="ButtonSize.Small">
										<Icon Name="IconName.Trash3" />
									</Button>
								</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="13">No hay datos disponibles.</td>
						</tr>
					}
				</tbody>
			</table>

			<!-- Controles de paginación -->
			<InputPaginations TotalItems="@TotalItems"
							  TotalPages="@TotalPages"
							  DisplayPages="@DisplayPages"
							  ActivePageNumber="@ActivePageNumber"
							  DisplayPagesChanged="OnDisplayPagesChanged"
							  ActivePageNumberChanged="OnActivePageNumberChanged"
							  OnPageChanging="LoadConexion" />

		</div>
	}
</div>

@if (showModal)
{
	<div class="modal show d-block" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminación</h5>
					<button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
							@onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea eliminar este registro?</p>
				</div>
				<div class="modal-footer">
					<Button id=Constantes.BTN_DELETE Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
					<Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
				</div>
			</div>
		</div>
	</div>
}

@if (showModalTimer)
{
	<div class="modal show d-block" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title inter-regular-normal-comet-14px">Cronograma de Migración</h5>
					<button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
							@onclick="CloseModalTime"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label for="hora1" class="form-label">Hora Migración 1</label>
						<input type="time" id="hora1" class="form-control" @bind="HoraMigracion1Time" />
					</div>
					<div class="mb-3">
						<label for="hora2" class="form-label">Hora Migración 2</label>
						<input type="time" id="hora1" class="form-control" @bind="HoraMigracion2Time" />
					</div>
					<div class="mb-3">
						<label for="hora3" class="form-label">Hora Migración 3</label>
						<input type="time" id="hora1" class="form-control" @bind="HoraMigracion3Time" />
					</div>
				</div>
				<div class="modal-footer">
					<Button Color="ButtonColor.Success" @onclick="async () => await RegistrarCronogramaAsync()">Aceptar</Button>
					<Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModalTime())>Cancelar</Button>
				</div>
			</div>
		</div>
	</div>

}