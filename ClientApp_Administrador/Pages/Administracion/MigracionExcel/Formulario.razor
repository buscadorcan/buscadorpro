@attribute [Route(Routes.NUEVO_MIGRACION_EXCEL)]
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization
@using SharedApp.Data
@using SharedApp.Dtos
@attribute [Authorize]
@inject NavigationManager NavigationManager

<PageTitle>Formulario Migración Excel</PageTitle>


<EditForm EditContext="@editContext" class="pt-4">
	<DataAnnotationsValidator />

	<!-- Título -->
	<div class="ds-title-section">
		<h2 class="ds-title-h2">Administración <span>Archivo migración</span></h2>
	</div>

	<div class="ds-content-section full row">

		<!-- Combo de selección de Ona -->
		<div class="form-row py-2">
			<div class="col-md-4">
				<div>
					<label class="label valign-text-middle inter-regular-normal-comet-16px">Ona</label>
				</div>

				<!-- Botón para desplegar la lista -->
				<button class="btn btn-secondary dropdown-toggle custom-dropdown-button" type="button" @onclick="ToggleDropdown" style="margin-top: 2% !important;">
					@if (onaSelected?.Siglas != null)
					{
						@onaSelected.Siglas
					}
					else
					{
						<span class="label valign-text-middle inter-regular-normal-comet-14px">Seleccionar Ona</span>
					}
				</button>

				<!-- Lista de opciones, visible solo si showDropdown es true -->
				<ul class="form-control inter-regular-normal-comet-14px" style="display:@(showDropdown ? "block" : "none");">
					@if (listaONAs != null && listaONAs.Any())
					{
						@foreach (var opcion in listaONAs)
						{
							<li>
								<a class="custom-dropdown-item" @onclick="() => CambiarSeleccionOna(opcion)">
									@opcion.Siglas
								</a>
							</li>
						}
					}
					else
					{
						<li><span class="custom-dropdown-item disabled">No hay ONAs disponibles</span></li>
					}
				</ul>
			</div>
		</div>

		<!-- Campo de archivo -->
		<div class="form-row py-2">
			<label class="label valign-text-middle inter-regular-normal-comet-16px">Base Datos</label>
			<div class="col" style="margin-top: 2% !important;">
				<InputFile @bind-Value="uploadedFile"
						   class="form-control inter-regular-normal-comet-14px"
						   placeholder="Archivo migración excel"
						   OnChange="OnInputFileChange" />
				<ValidationMessage For="(() => uploadedFile)" />
			</div>
		</div>

		<div class="ds-buttons-content">
			<a @onclick="Regresar">
				<div class="ds-btn-general ds-btn-red">
					<img class="icons" src="admin/img/icons.svg" alt="Icons">
					<div class="button-1 headingheadline4-h4">Regresar</div>
				</div>
			</a>
			<div class="save-button-container">
				<Button id="btnGuardar" @ref="saveButton" class="ds-btn-general ds-btn-blue" @onclick="async () => await OpenMigracionModal()">
					<div class="button-3 headingheadline4-h4">Guardar</div>
				</Button>
			</div>
		</div>
	</div>
</EditForm>


@if (showModal)
{
	<div class="modal show d-block" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Carga</h5>
					<button type="button" class="btn-close" aria-label="Close"
							@onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea cargar este archivo?</p>
				</div>
				<div class="modal-footer">
					<Button Color="ButtonColor.Success" @onclick=@(() => ConfirmCarga())>Confirmar</Button>
					<Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
				</div>
			</div>
		</div>
	</div>
}