@attribute [Route(Routes.REPORTE_ONA)]
@layout AdminLayout
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using Infractruture.Interfaces;
@using SharedApp.Dtos
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

<div class="chart-container">
	@if (isLoading)
	{
		<div class="d-flex justify-content-center align-items-center" style="height: 300px;">
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Cargando...</span>
			</div>
		</div>
	}
	else
	{
		<div class="ds-content-section-grid">

			<div class="ds-content-section-half">
				<div class="ds-title-section">
					<h2 class="ds-title-h2">@Titulo_vw_OrganismoRegistrado</h2>
					<div class="ds-buttons-content">
						<a class="ds-btn-general ds-btn-blue" onclick="exportChartToExcel('chart1', 'OrganismoRegistrado')">
							Exportar a Excel
						</a>
					</div>
				</div>
				<div class="ds-content-section ds-full">
					<canvas id="chart1" class="chart"></canvas>
				</div>
			</div>

			<!-- Gráfico 2: Organización por Esquema -->
			<div class="ds-content-section-half">
				<div class="ds-title-section">
					<h2 class="ds-title-h2">@Titulo_vw_OrganizacionEsquema</h2>
					<div class="ds-buttons-content">
						<a class="ds-btn-general ds-btn-blue" onclick="exportChartToExcel('chart2', 'OrganizacionEsquema')">
							Exportar a Excel
						</a>
					</div>
				</div>
				<div class="ds-content-section ds-full">
					<canvas id="chart2" class="chart"></canvas>
				</div>
			</div>

		</div>

		<!-- Gráfico 3: Organismo por Actividad -->
		<div class="ds-title-section">
			<h2 class="ds-title-h2">@Titulo_vw_OrganismoActividad</h2>
			<div class="ds-buttons-content">
				<a class="ds-btn-general ds-btn-blue" onclick="exportChartToExcel('chart3', 'OrganismoActividad')">
					@* <img src="https://cdn-icons-png.flaticon.com/512/732/732220.png" alt="Exportar Excel"> *@
					Exportar a Excel
				</a>
			</div>
		</div>
		<div class="ds-content-section ds-full">
			<canvas id="chart3" class="chart"></canvas>
		</div>

	}
</div>

<script>
	window.exportChartToExcel = async (chartId, fileName) => {
		const canvas = document.getElementById(chartId);
		if (!canvas) {
			console.error(`No se encontró el gráfico con ID ${chartId}`);
			return;
		}

		const chart = Chart.getChart(canvas);
		if (!chart) {
			console.error(`No se encontró el objeto Chart.js para ${chartId}`);
			return;
		}

		const labels = chart.data.labels;
		const data = chart.data.datasets[0].data;

		const workbook = new ExcelJS.Workbook();
		const worksheet = workbook.addWorksheet("Reporte");

		// Agregar los datos en la hoja de Excel
		worksheet.columns = [
			{ header: "Categoría", key: "categoria", width: 20 },
			{ header: "Valor", key: "valor", width: 10 },
		];

		labels.forEach((label, index) => {
			worksheet.addRow({ categoria: label, valor: data[index] });
		});

		// Capturar el gráfico en imagen con html2canvas
		html2canvas(canvas).then(async (capturedCanvas) => {
			const imageData = capturedCanvas.toDataURL("image/png").replace(/^data:image\/png;base64,/,  Constantes.VACIO);
			const imageId = workbook.addImage({
				base64: imageData,
				extension: "png",
			});

			// Insertar la imagen en la hoja de Excel
			worksheet.addImage(imageId, {
				tl: { col: 3, row: 1 },
				br: { col: 8, row: 10 },
			});

			// Guardar y descargar el archivo
			workbook.xlsx.writeBuffer().then((buffer) => {
				const blob = new Blob([buffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
				saveAs(blob, `${fileName}.xlsx`);
			});
		});
	};

	window.initCharts = (chartsData) => {
		const createBarChart = (elementId, data, horizontal = false) => {
			const canvas = document.getElementById(elementId);
			if (!canvas || canvas.tagName !== 'CANVAS') {
				console.error(`El elemento con ID ${elementId} no es un canvas o no existe.`);
				return;
			}

			const ctx = canvas.getContext('2d');
			new Chart(ctx, {
				type: 'bar',
				data: {
					labels: data.map(item => item.label || 'Sin etiqueta'),
					datasets: [{
						data: data.map(item => item.value || 0),
						backgroundColor: ['#6c63ff', '#63a4ff', '#00d1b2', '#ffdd57', '#ff6b6b'],
						borderWidth: 1,
					}]
				},
				options: {
					indexAxis: horizontal ? 'y' : 'x', // Cambiar orientación: vertical (x) u horizontal (y)
					responsive: true,
					scales: {
						x: {
							beginAtZero: true,
							title: {
								display: !horizontal,
								text: horizontal ? 'Cantidad' : ''
							}
						},
						y: {
							beginAtZero: true,
							title: {
								display: horizontal,
								text: horizontal ? 'Organismos' : 'Cantidad'
							}
						}
					},
					plugins: {
						legend: {
							display: false // No mostrar leyenda
						},
						tooltip: {
							callbacks: {
								label: function (tooltipItem) {
									return `${tooltipItem.label}: ${tooltipItem.raw}`;
								}
							}
						}
					}
				}
			});
		};

		const createPieChart = (elementId, data) => {
			const canvas = document.getElementById(elementId);
			if (!canvas || canvas.tagName !== 'CANVAS') {
				console.error(`El elemento con ID ${elementId} no es un canvas o no existe.`);
				return;
			}

			const ctx = canvas.getContext('2d');
			new Chart(ctx, {
				type: 'doughnut',
				data: {
					labels: data.map(item => item.label || 'Sin etiqueta'),
					datasets: [{
						data: data.map(item => item.value || 0),
						backgroundColor: ['#6c63ff', '#63a4ff', '#00d1b2', '#ffdd57'],
						borderWidth: 2,
						borderColor: '#fff',
					}]
				},
				options: {
					responsive: true,
					plugins: {
						legend: {
							position: 'right',
							labels: {
								font: {
									size: 14
								}
							}
						},
						tooltip: {
							callbacks: {
								label: function (tooltipItem) {
									return `${tooltipItem.label}: ${tooltipItem.raw}%`;
								}
							}
						}
					}
				}
			});
		};

		// Inicializar gráficos
		createBarChart('chart1', chartsData[0], false); // Gráfico de barras verticales
		createPieChart('chart2', chartsData[1]); // Gráfico de pastel
		createBarChart('chart3', chartsData[2], true); // Gráfico de barras horizontales
	};

	window.initMap = (data) => {
		window.initCharts(data.chartsData);
	};
</script>


<style>
	.chart-container {
		padding: 20px;
		background-color: #f9f9f9;
		border-radius: 10px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.row {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
		justify-content: center;
	}

	.chart-wrapper {
		width: 100%;
		max-width: 400px;
		position: relative;
	}

	.chart {
		width: 100%;
		height: auto;
	}

	.heatmap {
		height: 300px;
		width: 100%;
		border: 1px solid #ccc;
		border-radius: 8px;
	}

	h5 {
		font-weight: bold;
		margin-bottom: 15px;
		text-align: center;
	}

	.text-primary {
		color: #007bff;
	}

	.mb-4 {
		margin-bottom: 1.5rem;
	}

	/* exportar */
	.chart-container {
		padding: 20px;
		background-color: #f9f9f9;
		border-radius: 10px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}

	.row {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
		justify-content: center;
	}

	.chart-wrapper {
		width: 100%;
		max-width: 400px;
		position: relative;
		display: flex;
		flex-direction: column;
		align-items: center;
		text-align: center;
	}

	.title-wrapper {
		display: flex;
		justify-content: center;
		align-items: center;
		width: 100%;
		margin-bottom: 10px;
	}

	.button-container {
		display: flex;
		justify-content: center;
		margin-top: -20px; /* Ajuste para subir un poco el botón */
		width: 100%;
	}

	.export-btn-icon {
		background: none;
		border: none;
		cursor: pointer;
		padding: 5px;
		width: 48px; /* Aumentado el tamaño */
		height: 48px; /* Aumentado el tamaño */
		display: flex;
		align-items: center;
		justify-content: center;
	}

		.export-btn-icon img {
			width: 100%;
			height: auto;
		}
</style>
